== NAME ==

OAC.Client.StreamingVideo

== DESCRIPTION ==

The OAC streaming video annotation client allows text annotation of any region of a sequence of frames in a streaming video.

The client consists of a collection of presentations, lenses, and controllers.

== EVENTS ==

=== Annotation Manipulation ===

app.events.onActiveAnnotationChange::
This event is fired when the current active annotation changes to a different annotation. The event handler is called
with the id of the annotation item. If the id is +undefined+, then no annotation should be active.

app.events.onCurrentTimeChange::
This event is fired when the current time changes. The event handler is called with the time into the streaming video.

app.events.onCurrentModeChange::
This event is fired whenever the mode for the canvas area is changed. Examples: "Select", "Rectangle", "Ellipse"

== METHODS ==

=== Constructor ===

------------------------------------------------------------------------------
app = OAC.Client.StreamingVideo.initApp(
	container,
	{
		
	}
);
------------------------------------------------------------------------------

The +container+ is as expected for standard applications.

The following options are set by default and may be overridden at construction time:

controllers::
This is a list of controllers used by the various presentations that make up the annotation client.

annoActive;;

[horizontal]
type::: OAC.Client.StreamingVideo.Controller.AnnoActiveController

canvas;;

[horizontal]
type::: OAC.Client.StreamingVideo.Controller.CanvasClickController

editBox;;

[horizontal]
type::: OAC.Client.StreamingVideo.Controller.AnnotationEditSelectionGrid

shapeCreateBox;;
type::: OAC.Client.StreamingVideo.Controller.ShapeCreateBox

keyboard;;

[horizontal]
type::: OAC.Client.StreamingVideo.Controller.KeyboardListener

variables::
This is a list of singular data that the application tracks outside of any data store.

ActiveAnnotation;;
The value is the id of the currently active item in the presentation. The active item is the target of any
editing events.

presentations::
This is a list of the presentations coordinated by the application.

raphsvg;;
The application positions this presentation over the video play surface so that the graphical constraints of the annotation can be shown and edited.

[horizontal]
type::: MITHGrid.Presentation.RaphaelCanvas

annoItem;;
The application uses this presentation to display annotation bodies.

[horizontal]
type::: MITHGrid.Presentation.AnnotationList

=== Lens Management ===

The application provides the following methods for managing lenses in the +raphsvg+ and +annoItem+ presentations.

app.initShapeLens(container, view, model, itemId)::

This method returns a basic rendering without any shape-specific methods or drawing. The returned object will have the
following methods defined:

eventFocus();;
eventUnfocus();;
eventDelete(id);;
eventResize(id, size);;
eventMove(id, position);;
remove();;

app.initTextLens(container, view, model, itemId)::

This methods returns a basic rendering. As long as the body content does not need any special formatting, this may be sufficient. The returned object will have the following methods defined:

eventFocus();;
eventUnfocus();;
eventUpdate(id, data);;
remove();;
update();;

app.addShape(shapeType, lensFunction)::

This will add the given lens function to the +raphsvg+ presentation and associate it with the given type of annotation item.
The lens function may use the +app.initShapeLens+ method to build the basic lens rendering object. Doing so allows the shape
specific lens function to focus on the following methods:

update(item);;

Updates the rendering of the shape based on the new information in the passed +item+.

getExtents();;

Returns the coordinates of the bounding box for the shape.

The Raphaël shape object should be assigned to the rendering's +shape+ property.

app.addShapeControl(controlRenderFunction, newShapeDataFunction)::

This will use the +controlRenderFunction+ to render a UI element that can be used to create a new annotation when clicked.
The +newShapeDataFunction+ will be called to provide a JavaScript object that can be inserted into the data store to
instantiate the new annotation.
+
The +controlRenderFunction+ is passed a DOM element into which it should place its content. This DOM element will have a click
handler bound to it that will call the +newShapeDataFunction+ to generate the essential data for a new annotation of the given shape.

app.addBody(bodyType, lensFunction)::

This will add the given lens function to the +annoItem+ presentation and associate it with the given type of annotation item.
The lens function may use the +app.initTextLens+ method to build the basic lens rendering object.

=== Annotation Management ===

app.setActiveAnnotation(id)::
  Sets the currently active annotation to the annotation indicated by the +id+. Only one
annotation is active for manipulation. Calling this method will result in the +onActiveAnnotationChange+
event firing if the +id+ is different than the id of the annotation that is considered active at the time
this method is called.
+
To cause no annotation to be active, pass in +undefined+ for +id+.

app.getActiveAnnotation()::
  Returns the id of the currently active annotation. If no annotation is active, it will return +undefined+.

app.setCurrentTime(time)::
  Sets the current time for selecting annotations for display.

app.getCurrentTime()::
  Returns the current time as perceived by the annotation client.

== CONTROLLERS ==

app.controller.annoActive::

app.controller.canvas::

app.controller.editBox::

app.controller.keyboard::
  This controller listens for keyboard events and exposes them by firing event handlers.

== PRESENTATIONS ==

app.presentation.raphsvg::

This is the Raphaël canvas presentation that is overlaid on the play surface. The canvas is available through the +canvas+
property.
+
This presentation makes use of three controllers configured in the application: +canvas+, +editBox+, and +keyboard+. The events
associated with the +keyboard+ controller are exposed through the presentation events property.

app.presentation.annoItem::

This is the HTML presentation that the application uses to display the annotation body associated with the shape displayed through
the +raphsvg+ presentation.


